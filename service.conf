

server {
    server_name service;
    listen 8081;
    resolver 8.8.8.8;
    resolver_timeout 5s;
    location /redis-request {

        set $proxy "";

        limit_except POST {
                deny all;
        }
        rewrite_by_lua_block {

            local cjson = require "cjson"
            local redis = require "resty.redis"

            local red = redis:new()
            red:set_timeout(1000)
            local ok, err = red:connect("172.17.0.3", 6379)

            -- if redis connection is not available, return 204
            if not ok then
               ngx.status = 204
               return ngx.exit(204)
            --if redis connection is successful proxy request
            --to downstream server
            else
                ngx.status = 200
                return ngx.exit(200)
               --ngx.var.proxy = "google.com"
            end;

        }
        proxy_pass https://www.$proxy$uri;
    }
}


# if not ok then
#                  ngx.
#              else
#                 local res, err = red:get("key")
#                 return 204
#                 ngx.log(ngx.STDERR, res)
#                 --if (res == nil) then
#                 --    ngx.log(ngx.STDERR, "not found block")
#                 --    ngx.say("not found")
#                 --else
#                 --    ngx.log(ngx.STDERR, "found block")
#                 --    ngx.req.read_body()
#                 --    local request_body = ngx.req.get_body_data()
#                 --    local message = cjson.decode(request_body)
#                 --    ngx.say(res)
#                 --end
#              end
#
